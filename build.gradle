// For those who want the bleeding edge
buildscript {
	repositories {
		jcenter()
		maven {
			name = "forge"
			url = "http://files.minecraftforge.net/maven"
		}
	}
	dependencies {
		classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
	}
}

plugins {
	id 'com.matthewprenger.cursegradle' version '1.0.9'
}

buildDir = "build-${mc_version}"

apply plugin: 'net.minecraftforge.gradle.forge'

version = mc_version + "-" + mod_version
group = "org.squiddev"
archivesBaseName = "plethora"

minecraft {
	version = "${project.mc_version}-${project.forge_version}"
	runDir = "run-${project.mc_version}"
	mappings = "snapshot_20180316"

	replace '${mod_version}', project.mod_version
	replace '${mc_version}', project.mc_version
	replace '${cc_version}', project.cc_version
}

jar {
	manifest {
		attributes(
			'FMLAT': 'Plethora_at.cfg',
		)
	}

	exclude "**/*.java"
}

repositories {
	jcenter()

	// JEI + Tinker's
	maven { url = "http://dvs1.progwml6.com/files/maven" }

	// ComputerCraft
	maven { url "https://cc.crzd.me/maven/" }

	maven { url "https://squiddev.cc/maven/" }

	// ConfigGen
	maven { url = "https://dl.bintray.com/squiddev/maven" }

	// IC2 API
	maven { url = "http://maven.ic2.player.to/" }

	// Buildcraft
	ivy {
		artifactPattern "http://www.mod-buildcraft.com/releases/BuildCraft/[revision]/[module]-[revision](-[classifier]).[ext]"
	}

	// Multipart
	maven { url "http://maven.amadornes.com/" }

	// Refined Storage
	maven { url "https://repo.raoulvdberge.com" }

	// Tesla
	maven { url 'http://maven.mcmoddev.com' }

	// RF
	maven { url = "http://maven.covers1624.net" }

	// CBMP
	maven { url "http://chickenbones.net/maven" }

	// Forestry
	maven { url "http://maven.ic2.player.to/" }
}

def curseMod(String mod, int id, String version) {
	def f = file("lib-${project.mc_version}/${mod}-${version}.jar")
	if (!f.exists()) {
		f.parentFile.mkdirs();

		def url = new URL("https://minecraft.curseforge.com/projects/${mod}/files/${id}/download");
		logger.info("Fetching ${mod} (${version}) from ${url}")

		def connection = url.openConnection();
		connection.setRequestProperty("User-Agent", "Gradle file downloader");
		connection.connect();

		def i = connection.getInputStream();
		f.withOutputStream { it << i }
		i.close()
	}

	files(f)
}

dependencies {
	compile "dan200.computercraft:ComputerCraft:${project.cc_version}-${project.cc_build}"
	compile "mezz.jei:jei_1.12.2:4.9.1.192"

	compileOnly "org.squiddev:cc-tweaked:1.80pr1.6"

	compileOnly "cofh:RedstoneFlux:1.12-2.0.0.1:deobf"
	compileOnly "net.industrial-craft:industrialcraft-2:2.8.9-ex112:dev"
	compileOnly "buildcraft:buildcraft:7.99.14"
	compileOnly "net.darkhax.tesla:Tesla-1.12:1.0.61:deobf"

	// Tinker's + Dependencies
	compileOnly "slimeknights:TConstruct:1.12.2-2.9.1.70"
	compileOnly "slimeknights.mantle:Mantle:1.12-1.3.2.25"

	compileOnly "MCMultiPart2:MCMultiPart:2.2.2:deobf"
	compileOnly "refinedstorage:refinedstorage:1.5.35-16:deobf"
	compileOnly("appeng:appliedenergistics2:rv5-stable-8") { exclude group: "mezz.jei" }
	compileOnly("codechicken:ForgeMultipart:1.12-2.3.0.46:deobf") { exclude group: "codechicken" }
	compileOnly "codechicken:CodeChickenLib:1.12-3.1.5.330:deobf"

	compileOnly "net.sengir.forestry:forestry_1.12.2:5.8.0.250:api"
	compileOnly "net.sengir.forestry:forestry_1.12.2:5.8.0.250"

	// All the Curse mods
	compileOnly curseMod("botania", 2524591, "r1.10-353")
	compileOnly curseMod("baubles", 2518667, "1.12-1.5.2")
	compileOnly curseMod("storage-drawers", 2536306, "1.12.2-5.3.5")
	compileOnly curseMod("chameleon", 2450900, "1.12-4.1.3")
	compileOnly curseMod("blockcraftery", 2485336, "0.1.3")

	compileOnly('org.squiddev:ConfigGen:1.2.5') { exclude group: 'net.minecraftforge' }

	// compileOnly "org.squiddev:forgelint:0.1.1"
	compileOnly "com.google.errorprone:error_prone_annotations:2.0.21"

	testCompile 'junit:junit:4.11'
}

processResources {
	// this will ensure that this task is redone when the versions change.
	inputs.property "mod_version", project.mod_version
	inputs.property "mc_version", project.mc_version

	// replace stuff in mcmod.info, nothing else
	from(sourceSets.main.resources.srcDirs) {
		include 'mcmod.info'

		// replace version and mcversion
		expand 'mod_version': mod_version, 'mc_version': mc_version
	}

	// copy everything else, thats not the mcmod.info
	from(sourceSets.main.resources.srcDirs) {
		exclude 'mcmod.info'
	}
}

gradle.projectsEvaluated {
	tasks.withType(JavaCompile) {
		options.compilerArgs << "-Xlint" << "-Xlint:-rawtypes" << "-Xlint:-processing"
	}
}

// Not quite ready for common usage, but helped a lot in checking stuff
// compileJava { options.compilerArgs << "-Xplugin:ForgeLint" }

curseforge {
	apiKey = project.hasProperty('curseForgeApiKey') ? project.curseForgeApiKey : ''

	project {
		id = '248425'
		releaseType = 'release'
		changelog = ''

		relations {
			requiredLibrary 'computercraft'
		}
	}
}
